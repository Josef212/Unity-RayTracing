#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float2 _PixelOffset;

const float 0.001f;
const int reflectionBounces = 8;
const float skyBoxFactor = 1.2f;


struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere)
{
	float3 d = ray.origin - sphere.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.xyz);
	}
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(ray, bestHit);
	IntersectSphere(ray, bestHit, float4(0, 3.0f, 0, 1.0f));	
	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		float3 specular = float3(0.6f, 0.6f, 0.6f);

		ray.origin = hit.position + hit.normal * bias;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= specular;

		return float3(0.0f, 0.0f, 0.0f);
	}
	else
	{
		ray.energy = 0.0f;

		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * skyBoxFactorf;
	}
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);

	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	Ray ray = CreateCameraRay(uv);

	float3 result = float3(0.0f, 0.0f, 0.0f);
	for (int i = 0; i < reflectionBounces; ++i)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);

		if (!any(ray.energy))
			break;
	}
	
	Result[id.xy] = float4(result, 1.0f);
}
